name: build-test-deploy-changes
run-name: ${{ github.actor }} has trigger the job.
on:
  workflow_dispatch

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: product-service
  FOLDER_NAME: tmp
  BUCKET_NAME: ${{ vars.PRODUCT_SERVICE_BUCKET_NAME }}
  APPLICATION_NAME: ${{ vars.PRODUCT_SERVICE_APP_NAME }}
  APPLICATION_ENV_NAME: ${{ vars.PRODUCT_SERVICE_ENV_NAME }}
  ZIP_NAME: deployment_package.zip

jobs:
  mvn-build:
    runs-on: ubuntu-latest
    name: Build_Test_Push
    steps:
      - uses: actions/checkout@v2
      - name: Set up jdk 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'maven'
      - name: Build maven
        run: |
          mvn clean package -Drevision=$( git rev-parse --short HEAD )
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to Elastic Beantalk.
          export IMAGE_TAG=$(git rev-parse --short HEAD)
          dev_image=$ECR_REGISTRY/$ECR_REPOSITORY:dev
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --build-arg JAR_NAME=product-service-$IMAGE_TAG.jar
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $dev_image  
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $dev_image
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Replace wildcards for container definition
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          URI="s/PRODUCT_SERVICE_URI/$ECR_REGISTRY\/$ECR_REPOSITORY:dev/g"
          echo "URI: $URI"
          echo $(sed $URI ./Dockerrun.aws.json) > ./Dockerrun.aws.json
          cat ./Dockerrun.aws.json
      - name: Create ZIP deployment package
        run: zip -r deployment_package.zip ./Dockerrun.aws.json
      - name: Upload deployment package to S3
        run: aws s3 cp $ZIP_NAME s3://$BUCKET_NAME/$FOLDER_NAME/
      - name: Create version for ElasticBeanstalk Application
        env:
          IMAGE_TAG : ${{ steps.build-image.outputs.tag }}
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name $APPLICATION_NAME \
          --source-bundle S3Bucket="$BUCKET_NAME",S3Key="$FOLDER_NAME/$ZIP_NAME" \
          --version-label "$IMAGE_TAG" \
          --description "commit-sha-$IMAGE_TAG"

      - name: Deploy version to ElasticBeanstalk
        env:
          IMAGE_TAG: ${{ steps.build-image.outputs.tag }}
        run: aws elasticbeanstalk update-environment --environment-name $APPLICATION_ENV_NAME --version-label "$IMAGE_TAG"
