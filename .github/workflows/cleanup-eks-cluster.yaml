name: cleanup-eks-cluster
run-name: ${{ github.actor }} has trigger provision-eks-cluster job.
on:
  workflow_dispatch

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}
  NODE_GROUP_NAME: ${{ vars.EKS_NODE_GROUP_NAME }}
  KUBERNETES_VERSION: 1.27
  CLUSTER_RULE: ${{ vars.EKS_CLUSTER_RULE }}
  NODE_RULE: ${{ vars.EKS_NODE_RULE }}
  USER_ARN: ${{ secrets.USER_ARN }}
  SECURITY_GROUP_IDS: sg-057b3b21b5110b977
  SUBNET_IDS:  subnet-57505c30,subnet-5808ce56,subnet-2702de6a,subnet-9f4941c3,subnet-3398931d
  LABELS: environment=dev
  INSTANCE_TYPES: t3a.medium
  AMI_TYPE: AL2_x86_64
  DISK_SIZE: 8
  SCALING_CONFIG: minSize=1,maxSize=1,desiredSize=1
  ENVIRONMENT: dev
  ISTIO_VERSION: 1.19.0

jobs:
  eks-pipeline-cleanup:
    runs-on: ubuntu-latest
    name: eks-pipeline-cleanup
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Delete Cluster resources
        run: |
          echo "######################### Deleting node group. #########################"
          aws eks delete-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name $NODE_GROUP_NAME
          
          rs='None'
          echo "######################### Waiting for node group to be destroyed. #########################"
          while [ $rs != 'DELETED' ]
          do
            rs=$(aws eks describe-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name $NODE_GROUP_NAME --query nodegroup.status --output text || echo "DELETED")
            echo "######################### Node status: $rs #########################"
            if [ $rs != "DELETED" ]; then
              echo "######################### Waiting 20 seconds to query again cluster status #########################"
              sleep 10
            fi
          done
          echo "######################### Node group Deleted. #########################"
          
          echo "######################### Deleting Cluster. #########################"
          aws eks delete-cluster --name $CLUSTER_NAME
          
          rs='None'
          echo "######################### Waiting for cluster to be deleted. #########################"
          while [ $rs != 'DELETED' ]
          do
            rs=$(aws eks describe-cluster --name $CLUSTER_NAME --query cluster.status --output text || echo "DELETED")
            echo "######################### Cluster status: $rs #########################"
            if [ $rs != "DELETED" ]; then
              echo "######################### Waiting 20 seconds to query again cluster status #########################"
              sleep 10
            fi
          done
          echo "######################### Cluster Deleted. #########################"
          
          echo "######################### Deleting Load balancers. #########################"
          aws elbv2 describe-load-balancers --query "LoadBalancers[].LoadBalancerArn" --output text | tr "\t" "\n" | xargs -I{} aws elbv2 delete-load-balancer --load-balancer-arn {}
          
          echo "######################### Deleting Target Groups. #########################"
          aws elbv2 describe-target-groups --query "TargetGroups[*].TargetGroupArn" --output text | tr "\t" "\n" | xargs -I{} aws elbv2 delete-target-group --target-group-arn {}
